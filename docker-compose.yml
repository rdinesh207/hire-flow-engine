
version: '3.8'

services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app/backend
      - sqlite-data:/app/data
    environment:
      - DATABASE_URL=sqlite:///./data/recruitment.db
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - PINECONE_API_KEY=${PINECONE_API_KEY}
      - PINECONE_ENVIRONMENT=${PINECONE_ENVIRONMENT}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - kafka
    networks:
      - recruitment-network

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      - "3000:3000"
    volumes:
      - ./src:/app/src
      - ./public:/app/public
    environment:
      - VITE_API_URL=http://localhost:8000
    depends_on:
      - backend
    networks:
      - recruitment-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - recruitment-network

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - recruitment-network

  kafka-worker:
    build:
      context: .
      dockerfile: Dockerfile.backend
    command: python -m backend.kafka_worker
    environment:
      - DATABASE_URL=sqlite:///./data/recruitment.db
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - PINECONE_API_KEY=${PINECONE_API_KEY}
      - PINECONE_ENVIRONMENT=${PINECONE_ENVIRONMENT}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    volumes:
      - ./backend:/app/backend
      - sqlite-data:/app/data
    depends_on:
      - kafka
      - backend
    networks:
      - recruitment-network

  # Pinecone doesn't have an official Docker image, so we'd use a mock or connect to cloud
  # This is a placeholder/mock service
  pinecone-mock:
    image: nginx:alpine
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    networks:
      - recruitment-network

volumes:
  sqlite-data:

networks:
  recruitment-network:
    driver: bridge
